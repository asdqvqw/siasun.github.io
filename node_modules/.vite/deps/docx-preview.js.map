{
  "version": 3,
  "sources": ["../../docx-preview/dist/webpack:/docx/webpack/universalModuleDefinition", "../../docx-preview/dist/webpack:/docx/webpack/bootstrap", "../../docx-preview/dist/webpack:/docx/src/dom/dom.ts", "../../docx-preview/dist/webpack:/docx/src/docx-preview.ts", "../../docx-preview/dist/webpack:/docx/src/document.ts", "../../docx-preview/dist/webpack:/docx/src/document-parser.ts", "../../docx-preview/dist/webpack:/docx/src/utils.ts", "../../docx-preview/dist/webpack:/docx/src/dom/common.ts", "../../docx-preview/dist/webpack:/docx/src/parser/common.ts", "../../docx-preview/dist/webpack:/docx/src/html-renderer.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory();\n\telse\n\t\troot[\"docx\"] = factory();\n})(window, function() {\nreturn ", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n", "export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    domType: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n", "import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options> = null): PromiseLike<any> {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    options = { \r\n        ignoreHeight: true,\r\n        ignoreWidth: false,\r\n        debug: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... options\r\n    };\r\n\r\n    if (options) {\r\n        options.ignoreWidth = options.ignoreWidth || parser.ignoreWidth;\r\n        options.ignoreHeight = options.ignoreHeight || parser.ignoreHeight;\r\n        parser.debug = options.debug || parser.debug;\r\n\r\n        renderer.className = options.className || \"docx\";\r\n        renderer.inWrapper = options.inWrapper != null ? options.inWrapper : true;\r\n    }\r\n\r\n    return Document.load(data, parser)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, options);\r\n            return doc;\r\n        });\r\n}", "import { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id)\r\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string) {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"string\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n", "import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { SectionProperties, DocumentElement } from './dom/document';\r\nimport { namespaces, Columns, CommonProperties } from './dom/common';\r\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    ignoreHeight: boolean = true;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = this.parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != namespaces.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element): SectionProperties {\r\n        var section = <SectionProperties>{};\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            switch(e.localName) {\r\n                case \"pgSz\":\r\n                    section.pageSize = {\r\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\r\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\r\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\r\n                    }\r\n                    break;\r\n\r\n                case \"pgMar\":\r\n                    section.pageMargins = {\r\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\r\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\r\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\r\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\r\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\r\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\r\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\r\n                    };\r\n                    break;\r\n\r\n                case \"cols\":\r\n                    section.columns = this.parseColumns(e);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return section;\r\n    }\r\n\r\n    parseColumns(elem: Element): Columns {\r\n        var result = {\r\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\r\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\r\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\r\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\r\n            columns: []\r\n        };\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            if(e.localName != \"col\")\r\n                return;\r\n\r\n            result.columns.push({\r\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\r\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: ParagraphElement) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n", "import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}", "export const namespaces = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}", "import { Length } from \"../dom/common\";\r\n\r\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\r\n    for(let i = 0; i < elem.childNodes.length; i ++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\r\n            callback(<Element>n);\r\n    }\r\n}\r\n\r\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa,\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}", "import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Partial<Options>;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options>) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        this.clearElement(styleContainer);\r\n        this.clearElement(bodyContainer);\r\n\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docxjs library predefined styles\"));\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docx document styles\"));\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            styleContainer.appendChild(this.htmlDocument.createComment(\"docx document numbering styles\"));\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        var documentElement = this.renderDocument(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            wrapper.appendChild(documentElement);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            bodyContainer.appendChild(documentElement);\r\n        }\r\n    }\r\n\r\n    clearElement(elem: HTMLElement) {\r\n        while (elem.firstChild) {\r\n            elem.removeChild(elem.firstChild);\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    renderDocument(document: DocumentElement): HTMLElement {\r\n        var bodyElement = this.htmlDocument.createElement(\"section\");\r\n\r\n        bodyElement.className = this.className;\r\n\r\n        this.processElement(document);\r\n        this.renderChildren(document, bodyElement);\r\n\r\n        this.renderStyleValues(document.style, bodyElement);\r\n\r\n        if(document.props) {\r\n            var props = document.props;\r\n\r\n            if(props.pageMargins) {\r\n                bodyElement.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                bodyElement.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                bodyElement.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                bodyElement.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if(props.pageSize) {\r\n                if(!this.options.ignoreWidth)\r\n                    bodyElement.style.width = this.renderLength(props.pageSize.width);\r\n                if(!this.options.ignoreHeight)\r\n                    bodyElement.style.height = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if(props.columns && props.columns.numberOfColumns) {\r\n                bodyElement.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                bodyElement.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if(props.columns.separator) {\r\n                    bodyElement.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return bodyElement;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; display: flex; justify-content: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(this.renderStyle(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderStyle(styleContent: string) {\r\n        var styleElement = document.createElement(\"style\");\r\n        styleElement.type = \"text/css\";\r\n        styleElement.innerHTML = styleContent;\r\n        return styleElement;\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        var result: HTMLElement[] = null;\r\n\r\n        if (elem.children != null)\r\n            result = elem.children.map(x => this.renderElement(x, elem)).filter(x => x != null);\r\n\r\n        if (into && result)\r\n            for(let x of result)\r\n                into.appendChild(x);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return this.htmlDocument.createElement(elem.break == \"page\" ? \"hr\" : \"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "window", "installedModules", "__webpack_require__", "moduleId", "i", "l", "modules", "call", "m", "c", "d", "name", "getter", "o", "Object", "defineProperty", "enumerable", "get", "r", "Symbol", "toStringTag", "value", "t", "mode", "__esModule", "ns", "create", "key", "bind", "n", "object", "property", "prototype", "hasOwnProperty", "p", "s", "DomType", "DomRelationshipType", "e", "a", "document_1", "document_parser_1", "html_renderer_1", "renderAsync", "data", "bodyContainer", "styleContainer", "options", "parser", "DocumentParser", "renderer", "HtmlRenderer", "document", "__assign", "ignoreHeight", "ignoreWidth", "debug", "className", "inWrapper", "Document", "load", "then", "doc", "render", "PartType", "this", "zip", "JSZip", "docRelations", "fontRelations", "numRelations", "styles", "fonts", "numbering", "blob", "loadAsync", "z", "files", "loadPart", "DocumentRelations", "FontRelations", "NumberingRelations", "Style", "Numbering", "Promise", "all", "filter", "x", "loadDocumentImage", "id", "loadResource", "loadNumberingImage", "loadFont", "relations", "rel", "length", "resolve", "target", "async", "part", "_this", "f", "xml", "parseDocumentRelationsFile", "parseStylesFile", "parseNumberingFile", "parseDocumentFile", "dom_1", "utils", "common_1", "common_2", "autos", "shd", "color", "highlight", "SizeType", "skipDeclaration", "xmlString", "xrels", "parse", "elements", "map", "stringAttr", "type", "values", "valueOfRelType", "result", "domType", "children", "style", "props", "xbody", "byTagName", "foreach", "elem", "localName", "push", "parseParagraph", "parseTable", "parseSectionProperties", "xstyles", "parseStyle", "parseDefaultStyles", "node", "basedOn", "rPr", "parseDefaultProperties", "pPr", "parseCommonProperties", "namespaceURI", "namespaces", "wordml", "getAttributeColorValue", "fontSize", "getAttributeLengthValue", "LengthUsage", "FontSize", "isDefault", "boolAttr", "linked", "aliases", "split", "_i", "_a", "parseTableStyle", "console", "warn", "selector", "xnums", "mapping", "bullets", "parseAbstractNumbering", "forEach", "parseNumberingPicBullet", "numId", "abstractNumId", "elementStringAttr", "pict", "shape", "imagedata", "intAttr", "src", "parseNumberingLevel", "level", "bullet", "levelText", "format", "section", "forEachElementNS", "pageSize", "width", "height", "orientation", "getAttributeNS", "pageMargins", "left", "right", "top", "bottom", "header", "footer", "gutter", "columns", "parseColumns", "numberOfColumns", "getAttributeIntValue", "space", "separator", "getAttributeBoolValue", "equalWidth", "Paragraph", "parseRun", "parseHyperlink", "parseBookmark", "parseParagraphProperties", "paragraph", "addElementClass", "classNameOfCnfStyle", "parseNumbering", "parseFrame", "parseTabs", "numberingId", "numberingLevel", "Run", "parent", "Hyperlink", "anchor", "href", "text", "textContent", "break", "tab", "parseDrawing", "parseRunProperties", "run", "wrapper", "parseDrawingWrapper", "Drawing", "isAnchor", "wrapType", "simplePos", "posX", "relative", "align", "offset", "posY", "sizeAttr", "Emu", "pos", "alignNode", "offsetNode", "sizeValue", "g", "parseGraphic", "graphicData", "parsePicture", "Image", "blipFill", "blip", "spPr", "xfrm", "Table", "parseTableRow", "parseTableColumns", "parseTableProperties", "table", "cellStyle", "classNameOftblLook", "parseTablePosition", "topFromText", "bottomFromText", "rightFromText", "leftFromText", "addSize", "Row", "parseTableCell", "parseTableRowProperties", "row", "Cell", "parseTableCellProperties", "cell", "span", "childStyle", "handler", "valueOfJc", "valueOfTextAlignment", "colorAttr", "valueOfSize", "parseTrHeight", "valueOfStrike", "valueOfBold", "parseUnderline", "parseIndentation", "parseFont", "parseBorderProperties", "valueOfMargin", "parseMarginProperties", "valueOfTblLayout", "parseSpacing", "val", "col", "ascii", "firstLine", "start", "end", "before", "after", "line", "lineRule", "toFixed", "tabs", "position", "leader", "output", "valueOfBorder", "replace", "DOMParser", "parseFromString", "firstChild", "tagName", "childNodes", "nodeType", "cb", "nodeName", "attrName", "attributes", "attr", "item", "defValue", "autoColor", "v", "parseInt", "Dxa", "convertSize", "indexOf", "intVal", "Border", "Percent", "Settings", "Theme", "StylesWithEffects", "Styles", "FontTable", "WebSettings", "Unknown", "trim", "b", "checkMask", "num", "mask", "appendClass", "classList", "element", "parseLength", "usage", "callback", "defaultValue", "htmlDocument", "digitTest", "test", "clearElement", "appendChild", "createComment", "renderDefaultStyle", "renderStyles", "renderNumbering", "documentElement", "renderDocument", "renderWrapper", "removeChild", "processClassName", "processStyles", "stylesMap", "_b", "_c", "baseStyle", "baseValues", "styleValues", "this_1", "copyStyleProperties", "_d", "_e", "_f", "styles_1", "processElement", "processTable", "input", "attrs", "getOwnPropertyNames", "attrs_1", "bodyElement", "createElement", "renderChildren", "renderStyleValues", "paddingLeft", "renderLength", "paddingRight", "paddingTop", "paddingBottom", "columnCount", "columnGap", "columnRule", "styleText", "renderStyle", "listStyleType", "rootCounters", "this_2", "numberingClass", "counter", "numberingCounter", "styleToString", "counter-reset", "content", "levelTextToContent", "counter-increment", "display", "list-style-position", "list-style-type", "valiable_1", "toLowerCase", "background", "numFormatToCssValue", "styles_2", "join", "styleContent", "styleElement", "innerHTML", "styles_3", "subStyles", "linkedStyle", "concat", "subStyles_1", "subStyle", "renderElement", "renderParagraph", "renderRun", "renderTable", "renderTableRow", "renderTableCell", "renderHyperlink", "renderDrawing", "renderImage", "into", "result_1", "renderClass", "renderCommonProeprties", "textIndent", "link", "renderTableColumns", "columns_1", "colElem", "colSpan", "ouput", "lvl", "selectors", "cssText", "substring", "none", "decimal", "lowerLetter", "upperLetter", "lowerRoman", "upperRoman"]
}
