<script setup>
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { onMounted, ref, watch } from 'vue';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader';
const gltfLoader = new GLTFLoader();

gltfLoader.load(
  './main/test.glb',
  (gltf) => {
    car = gltf.scene;
    scene.add(car);
  },
  (xhr) => {
    console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
  },
  (error) => {
    console.error('Error loading model:', error);
  }
);
//光源
const light1 = new THREE.DirectionalLight(0xffffff, 1);
light1.position.set(0, 0, 10);

const light2 = new THREE.DirectionalLight(0xffffff, 1);
light2.position.set(0, 0, -10);

const light3 = new THREE.DirectionalLight(0xffffff, 1);
light3.position.set(10, 0, 0);

const light4 = new THREE.DirectionalLight(0xffffff, 1);
light4.position.set(-10, 0, 0);

const light5 = new THREE.DirectionalLight(0xffffff, 1);
light5.position.set(0, 10, 0);

const renderer = new THREE.WebGLRenderer({
  antialias: true,
});
renderer.setSize(window.innerWidth, window.innerHeight);


renderer.setClearColor(0x000000);
//网格大小
const size = 500;
const render = () => {
  renderer.render(scene, camera);
  controls && controls.update();
  requestAnimationFrame(render);
};

let controls, gridHelper, car, fanMesh, fanGeometry;
let canvasDom = ref(null);

const mouse = new THREE.Vector2();
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(-3, 0.5, 3);



onMounted(() => {
  canvasDom.value.appendChild(renderer.domElement);
  //网格
  gridHelper = new THREE.GridHelper(size, size);
  gridHelper.material.opacity = 0.8;
  gridHelper.material.transparent = true;
  scene.add(gridHelper);


  controls = new OrbitControls(camera, renderer.domElement);
  controls.update();
  //光源
  scene.add(light1);
  scene.add(light2);
  scene.add(light3);
  scene.add(light4);
  scene.add(light5);

  render();
});

</script>




<template>
  <div class="home">
    <div class="canvas-container" ref="canvasDom">
      <el-button class="button">aaaaaaaaa</el-button>
    </div>
  </div>
</template>



<style scoped>
  .home {
  /* position: fixed; */
  bottom: 0;
  left: 0;
  z-index: 10;
}
.canvas-container {
  position: relative; /* 确保子元素使用绝对定位 */
}
.button{
  position: absolute; /* 使用绝对定位 */
  top: 10px; /* 调整按钮位置 */
  left: 10px;
  z-index: 50; /* 确保按钮在 Canvas 上方 */
}
</style>

