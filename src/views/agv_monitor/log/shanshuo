<template>
  <div class="data-container">
    <div
      v-for="(item, index) in items"
      :key="index"
      :class="{'highlight': item.isHighlighted}"
      class="data-item"
    >
      {{ item.text }}
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue';

// 示例数据
const items = ref([
  { text: 'Item 1', isHighlighted: false },
  { text: 'Item 2', isHighlighted: false },
  { text: 'Item 3', isHighlighted: false },
]);

// 用于存储定时器ID
let blinkTimeout;

const updateData = (newData) => {
  items.value = newData;
  items.value.forEach(item => item.isHighlighted = false); // 重置高亮状态
  clearTimeout(blinkTimeout); // 清除之前的定时器
};

watch(items, (newItems) => {
  clearTimeout(blinkTimeout);
  blinkTimeout = setTimeout(() => {
    newItems.forEach(item => {
      item.isHighlighted = true; // 设置高亮
      startBlinking(item); // 启动闪烁
    });
  }, 500); // 500毫秒后高亮闪烁
});

// 启动闪烁效果
const startBlinking = (item) => {
  let isHighlighted = true;
  const blinkInterval = setInterval(() => {
    isHighlighted = !isHighlighted;
    item.isHighlighted = isHighlighted;
  }, 500); // 每500毫秒切换一次高亮

  // 清除闪烁效果（可根据条件停止）
  // 这里可以添加条件来清除闪烁，示例中使用定时器在下次更新时清除
  watch(items, () => {
    clearInterval(blinkInterval);
  });
};

// 示例数据更新（可调用）
const changeData = () => {
  updateData([
    { text: 'Item 1', isHighlighted: false },
    { text: 'Item 2', isHighlighted: false },
    { text: 'Item 3', isHighlighted: false },
  ]);
};

// 模拟数据变化
setTimeout(() => {
  changeData();
}, 2000); // 2秒后更新数据
</script>

<style scoped>
.data-container {
  padding: 20px;
}

.data-item {
  padding: 10px;
  margin: 5px 0;
  cursor: pointer;
  transition: background-color 0.3s;
}

.highlight {
  background-color: yellow; /* 高亮颜色 */
}
</style>